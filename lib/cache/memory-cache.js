'use strict';

const CacheBase = require('./cache-base');
const is = require('../is.js');
const db = require('../config.js').provider;
const cache = {};

/**
 * Hash kept in memory
 * Match Redis behavior
 * @extends {EventEmitter}
 * @extends {CacheBase}
 */
class MemoryCache extends CacheBase {
	constructor() {
		super();
		this.connected = true;
	}

	select(key, callback) {
		if (contains(key)) {
			callback(ErrorType.None, cache[key]);
		} else {
			callback(ErrorType.notFound);
		}
	}

	selectMember(key, memberKey, callback) {
		if (contains(key, memberKey)) {
			callback(ErrorType.None, cache[key][memberKey]);
		} else {
			callback(ErrorType.notFound);
		}
	}

	selectAll(key, callback) {
		// returning a field that's a hash is no different than returning a primitive type
		this.select(key, callback);
	}

	/**
	 * Insert value into hash
	 * @param {String} key
	 * @param {String} value
	 * @param {function(Object, (String|Number)} [callback] Method generated by responder()
	 */
	add(key, value, callback) {
		cache[key] = value;
		if (is.callable(callback)) { callback(ErrorType.None, true); }
	}

	/**
	 * Insert value into hash
	 * @param {String} key
	 * @param {String} memberKey
	 * @param {String} value
	 * @param {function(Object, (String|Number)} [callback] Method generated by responder()
	 * @see http://redis.io/commands/hset
	 */
	addMember(key, memberKey, value, callback) {
		// match redis behavior
		let created = true;

		if (contains(key)) {
			created = false;
		} else {
			cache[key] = {};
		}
		cache[key][memberKey] = value;

		callback(ErrorType.none, created);
	}

	addAll(key, hash, callback) {
		cache[key] = hash;
		if (is.callable(callback)) { callback(ErrorType.None, true); }
	}

	exists(key, callback) {
		callback(ErrorType.None, contains(key));
	}

	memberExists(key, memberKey, callback) {
		callback(ErrorType.None, contains(key, memberKey));
	}

	/**
	 * Keys matching pattern
	 * @param {String} pattern
	 * @param {function(Number, [String[]])} callback
	 */
	keys(pattern, callback) {
		let re = ruleToPattern(pattern);
		let keys = Object.keys(cache).filter(k => re.test(k));
		let error = (keys.length > 0) ? ErrorType.None : ErrorType.NotFound;

		callback(error, keys);
	}

	memberKeys(key, callback) {
		let fields = [];
		let error = ErrorType.notFound;

		if (is.defined(cache, key)) {
			fields = Object.keys(cache[key]);
			if (fields.length > 0) { error = ErrorType.None; }
		}
		callback(error, fields);
	}

	/**
	 * @param {String|String[]} key One or more item keys
	 * @param {function} callback
	 */
	remove(key, callback) {
		let removed = 0;

		if (is.array(key)) {
			for (let k of key) {
				if (contains(k)) {
					removed++;
					delete cache[k];
				}
			}
		} else if (contains(key)) {
			removed = 1;
			delete cache[key];
		}
		callback(ErrorType.None, removed);
	}

	removeMember(key, memberKey, callback) {
		let removed = 0;

		if (contains(key, memberKey)) {
			removed = 1;
			delete cache[key][memberKey];
		}
		callback(ErrorType.None, removed);
	}

	/**
	 * Whether cache access caused an error
	 * @param {String|String[]} key
	 * @param {Object|Number|String} err
	 * @return {Boolean}
	 */
	hasError(key, err) {
		if (is.value(err) && err != ErrorType.None) {
			if (is.array(key)) { key = key.toString(); }
			let message = 'an unknown error';

			switch (err) {
				case ErrorType.notFound: message = 'key not found'; break;
			}
			db.log.error('Cache operation with key "%s" resulted in %s', key, message);
			return true;
		}
		return false;
	}
}

module.exports = MemoryCache;

// - Private static members ---------------------------------------------------

const ErrorType = {
	None: 0,
	NotFound: 1
};

/**
 * Whether key and memberKey are in the memory hash
 * @param {String} key
 * @param {String} [memberKey]
 * @returns {Boolean}
 */
function contains(key, memberKey) {
	let defined = is.defined(cache, key);

	return (defined && memberKey !== undefined)
		? is.defined(cache[key], memberKey)
		: defined;
}

/**
 * Convert wildcards to regex pattern
 * @param {String} rule
 * @return {RegExp}
 */
function ruleToPattern(rule) {
	rule = rule.replace('*', '.*');
	rule = rule.replace('?', '.?');
	rule = '^' + rule + '$';
	return new RegExp(rule);
}