'use strict';

const TI = require('../../');
const CacheBase = TI.Provider.Cache.Base;

/**
 * @extends EventEmitter
 * @extends CacheBase
 */
class FirebaseCache extends CacheBase {
	/**
	 * @param {String} redisUrl
	 */
	constructor(redisUrl) {
		super();
	}

	select(key, callback) {
		//this.client.get(key, callback);
	}

	selectMember(key, memberKey, callback) {
		//this.client.hget(key, memberKey, callback);
	}

	selectAll(key, callback) {
		//this.client.hgetall(key, callback);
	}

	/**
	 * Insert value into hash
	 * @param {String} key
	 * @param {String} value
	 * @param {function(Object,(String|Number)} [callback] Method generated by responder()
	 */
	add(key, value, callback) {
		//this.client.set(key, value, callback);
	}

	/**
	 * Insert value into hash
	 * @param {String} key
	 * @param {String} memberKey
	 * @param {String} value
	 * @param {function(Object,(String|Number)} [callback] Method generated by responder()
	 * @see http://redis.io/commands/hset
	 */
	addMember(key, memberKey, value, callback) {
		//this.client.hset(key, memberKey, value, callback);
	}

	addAll(key, hash, callback) {
		//this.client.hmset(key, hash, callback);
	}

	exists(key, callback) {
		//this.client.exists(key, callback);
	}

	memberExists(key, memberKey, callback) {
		//this.client.hexists(key, memberKey, callback);
	}

	/**
	 * Keys matching pattern
	 * @param {String} pattern
	 * @param callback
	 */
	keys(pattern, callback) {
		//this.client.keys(pattern, callback)
	}

	memberKeys(key, callback) {
		//this.client.hkeys(key, callback);
	}

	/**
	 * @param {String|String[]} key One or more item keys
	 * @param {function} callback
	 */
	remove(key, callback) {
		//if (is.array(key)) {
		//	this.client.hdel(key, callback);
		//} else {
		//	this.client.del(key, callback);
		//}
	}

	/**
	 * Node redis is a little dumb here and merely toString()'s the field
	 * array if passed as a second argument so instead combine the key
	 * and fields which get converted into a list of arguments which is
	 * what redis server hdel actuall expects
	 * @param {String} key
	 * @param {String} memberKey
	 * @param {Function} callback
	 */
	removeMember(key, memberKey, callback) {
		//this.client.hdel([key].concat(memberKey), callback);
	}
}

module.exports = FirebaseCache;