'use strict';

const ProviderBase = require('./provider-base');
const is = require('./../is.js');
const setting = require('./../settings.js');
const log = require('./../log.js');
const hash = {};

/**
 * Hash kept in memory
 * Match Redis behavior
 * @extends {EventEmitter}
 * @extends {ProviderBase}
 */
class MemoryProvider extends ProviderBase {

	constructor() {
		super();
		this.connected = true;
	}

	select(key, callback) {

	}

	selectMember(key, memberKey, callback) {

	}

	selectAll(key, callback) {

	}

	/**
	 * Insert value into hash
	 * @param {String} key
	 * @param {String} value
	 * @param {Function(Object, (String|Number)} [callback] Method generated by responder()
	 */
	add(key, value, callback) {

	}

	/**
	 * Insert value into hash
	 * @param {String} key
	 * @param {String} memberKey
	 * @param {String} value
	 * @param {Function(Object, (String|Number)} [callback] Method generated by responder()
	 */
	addMember(key, memberKey, value, callback) {

	}

	addAll(key, hash, callback) {

	}

	exists(key, callback) {

	}

	memberExists(key, memberKey, callback) {

	}

	keys(key, callback) {

	}

	memberKeys(key, callback) {

	}

	/**
	 * @param {String|String[]} key One or more item keys
	 * @param {function} callback
	 */
	remove(key, callback) {

	}

	removeMember(key, memberKey, callback) {

	}

	responder(key, callback, type) {
		return (err, reply) => {
			let error = this.hasError(key, err);

			if (is.callable(callback)) {
				let response = null;
				if (type === undefined) { type = this.replyType.NONE; }

				if (error) {
					if (type !== this.replyType.raw && type !== this.replyType.JSON) { response = false; }
				} else {
					switch (type) {
						case this.replyType.BIT: response = (reply == 1); break;
						case this.replyType.OKAY: response = (reply == 'OK'); break;
						case this.replyType.COUNT: response = (reply == howMany(key)); break;
						case this.replyType.RAW: response = reply; break;
						case this.replyType.JSON: response = (reply) ? JSON.parse(reply) : null; break;
					}
				}
				callback(response);
			}
		}
	}
}

module.exports = MemoryProvider;
