'use strict';

const is = require('./../is.js');

class HashBase {
	constructor() {
		this.available = true;
	}

	select(key, callback) {}

	selectMember(key, memberKey, callback) {}

	selectAll(key, callback) {}

	/**
	 * Insert value into hash
	 * @param {String} key
	 * @param {String} value
	 * @param {Function(Object, (String|Number)} [callback] Method generated by responder()
	 */
	add(key, value, callback) {}

	/**
	 * Insert value into hash
	 * @param {String} key
	 * @param {String} memberKey
	 * @param {String} value
	 * @param {Function(Object, (String|Number)} [callback] Method generated by responder()
	 */
	addMember(key, memberKey, value, callback) {}

	/**
	 * Insert hash
	 * @param {String} key
	 * @param {Object} hash
	 * @param {Function} callback
	 */
	addAll(key, hash, callback) {}

	exists(key, callback) {}

	memberExists(key, memberKey, callback) {}

	keys(key, callback) {}

	memberKeys(key, callback) {}

	/**
	 * @param {String|String[]} key One or more item keys
	 * @param {function} callback
	 */
	remove(key, callback) {}

	/**
	 *
	 * @param {String} key
	 * @param {String} type
	 * @param {Function} callback
	 */
	responder(key, type, callback) {}

	/**
	 * Whether Redis returned an error
	 * @param {String|String[]} key
	 * @param {Object} err
	 * @return {Boolean}
	 */
	hasError(key, err) {
		if (err !== null) {
			if (is.array(key)) { key = key.toString(); }
			log.error('Operation with key "%s" resulted in %s', key, err.toString());
			return true;
		}
		return false;
	}
}

module.exports = HashBase;