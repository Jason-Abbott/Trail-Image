'use strict';

const HashBase = require('./hash-base');
const is = require('./../is.js');
const setting = require('./../settings.js');
const log = require('./../log.js');
const hash = {};

/**
 * Hash kept in memory
 * @extends {HashBase}
 */
class Memory extends HashBase {
	/**
	 *
	 * @param {Object[]} pendingInserts Array of pending inserts
	 */
	constructor(pendingInserts) {
		super();

		if (is.array(pendingInserts)) {
			for (let p of pendingInserts) {
				for (let name in p) {
					this[name].apply(this, p[name]);
				}
			}
		}
	}

	select(key, callback) {

	}

	selectMember(key, memberKey, callback) {

	}

	selectAll(key, callback) {

	}

	/**
	 * Insert value into hash
	 * @param {String} key
	 * @param {String} value
	 * @param {Function(Object, (String|Number)} [callback] Method generated by responder()
	 */
	add(key, value, callback) {

	}

	/**
	 * Insert value into hash
	 * @param {String} key
	 * @param {String} memberKey
	 * @param {String} value
	 * @param {Function(Object, (String|Number)} [callback] Method generated by responder()
	 */
	addMember(key, memberKey, value, callback) {

	}

	addAll(key, hash, callback) {

	}

	exists(key, callback) {

	}

	memberExists(key, memberKey, callback) {

	}

	keys(key, callback) {

	}

	memberKeys(key, callback) {

	}

	/**
	 * @param {String|String[]} key One or more item keys
	 * @param {function} callback
	 */
	remove(key, callback) {

	}

	removeMember(key, memberKey, callback) {

	}
}

module.exports = Memory;
